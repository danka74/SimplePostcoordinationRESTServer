package se.liu.imt.mi.snomedct.simplepcserver;

/**
 *
 */

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.antlr.v4.runtime.tree.ParseTree;
import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.XMLConfiguration;
import org.apache.log4j.Logger;
import org.restlet.Application;
import org.restlet.Component;
import org.restlet.Context;
import org.restlet.Request;
import org.restlet.Response;
import org.restlet.Restlet;
import org.restlet.Server;
import org.restlet.data.Form;
import org.restlet.data.Header;
import org.restlet.data.MediaType;
import org.restlet.data.Method;
import org.restlet.data.Protocol;
import org.restlet.data.Status;
import org.restlet.engine.adapter.HttpResponse;
import org.restlet.engine.header.HeaderConstants;
import org.restlet.representation.Representation;
import org.restlet.representation.StringRepresentation;
import org.restlet.resource.Get;
import org.restlet.resource.Options;
import org.restlet.resource.Post;
import org.restlet.resource.ServerResource;
import org.restlet.routing.Router;
import org.restlet.util.Series;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyManager;

public class SimplePostcoordinationApplication extends Application {

	private static final Logger log = Logger
			.getLogger(SimplePostcoordinationApplication.class);
	private static Configuration config = null;

	public static void main(String[] args) throws Exception {

		// initialize configuration
		try {
			config = new XMLConfiguration("config.xml");
			log.debug("Configuration in 'config.xml' loaded");
		} catch (Exception e) {
			log.debug("Exception", e);
			throw e;
		}

		Component component = new Component();
		component.getServers().add(Protocol.HTTP, config.getInt("server.port"));
		component.getDefaultHost().attach(new SimplePostcoordinationApplication());
		component.start();

	}

	@Override
	public synchronized Restlet createInboundRoot() {
		Router router = new Router(getContext());

		// Serve the files generated by the GWT compilation step.
		router.attach("/check", SyntaxCheckResource.class);
		router.attach("/svg", SVGDiagramResource.class);


		return router;
	}

}
